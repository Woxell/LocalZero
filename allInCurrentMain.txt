===== ./.mvn/wrapper/maven-wrapper.properties =====
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip


===== ./src/main/java/com/localzero/api/config/DataInitializer.java =====
package com.localzero.api.config;

import com.localzero.api.entity.*;
import com.localzero.api.enumeration.InitiativeCategory;
import com.localzero.api.repository.*;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Configuration;

import java.time.LocalDateTime;

@Configuration
@RequiredArgsConstructor
public class DataInitializer {

    private final PersonRepository personRepository;
    private final InitiativeRepository initiativeRepository;
    private final PostRepository postRepository;
    private final CommunityRepository communityRepository;

    @PostConstruct
    public void initData() {
        // Skapa och spara community först
        Community community = new Community();
        community.setMemberEmail("test@example.com");
        community = communityRepository.save(community); // <- Viktigt!

        // Skapa och spara person
        Person person = new Person();
        person.setEmail("test@example.com");
        person.setName("Test Användare");
        person.setPassword("{noop}"+"password");
        person.setCommunity(community);
        person = personRepository.save(person);

        // Skapa och spara initiative
        Initiative initiative = new Initiative();
        initiative.setTitle("Miljöinitiativ");
        initiative.setDescription("Planterar träd i Malmö");
        initiative.setCategory(InitiativeCategory.ENVIRONMENT);
        initiative.setLocation("Malmö");
        initiative.setStartDate(LocalDateTime.now().plusDays(1));
        initiative.setEndDate(LocalDateTime.now().plusDays(10));
        initiative.setPublic(true);
        initiative.setCreator(person);
        initiative.setCommunity(community);
        initiative.setCommunityMember(person);
        initiative.setCreationDatetime(LocalDateTime.now());
        initiative = initiativeRepository.save(initiative);

        // Skapa och spara post
        Post post = new Post();
        post.setContent("Första inlägget i initiativet!");
        post.setAuthor(person);
        post.setInitiative(initiative);
        post.setCreationDatetime(LocalDateTime.now());
        post.setLikesCount(0);
        postRepository.save(post);
    }

}


===== ./src/main/java/com/localzero/api/controller/FeedController.java =====
package com.localzero.api.controller;

/**
 * @author: André
 */

import com.localzero.api.entity.Person;
import com.localzero.api.entity.Post;
import com.localzero.api.service.PersonService;
import com.localzero.api.service.PostService;
import lombok.AllArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import java.util.List;

@Controller
@AllArgsConstructor
public class FeedController {

    private PersonService personService;
    private PostService postService;

    @GetMapping("/feed")
    public String showFeed(Authentication authentication, Model model) {
        String email = authentication.getName(); // Hämta inloggad e-post
        Person person = personService.findByEmail(email); // Hämta användaren via e-post

        List<Post> posts = postService.getPostsByAuthorEmail(email);

        model.addAttribute("name", person.getName());
        model.addAttribute("posts",posts);
        model.addAttribute("source", "feed");
        return "feed";
    }

}

===== ./src/main/java/com/localzero/api/controller/IndexController.java =====
package com.localzero.api.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class IndexController {
    @GetMapping("/") public String toDefaultPath(){
        return "feed";
    }
}


===== ./src/main/java/com/localzero/api/controller/InitiativeController.java =====
package com.localzero.api.controller;

/**
 * @author: Emil
 */

import com.localzero.api.entity.Initiative;
import com.localzero.api.entity.Person;
import com.localzero.api.enumeration.InitiativeCategory;
import com.localzero.api.repository.InitiativeRepository;
import com.localzero.api.repository.PersonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import com.localzero.api.template.InitiativeCreator;

import java.security.Principal;
import java.time.LocalDateTime;

@Controller
@RequestMapping("/initiatives")
public class InitiativeController {

    private final InitiativeCreator ic;

    public InitiativeController(InitiativeCreator ic){
        this.ic = ic;
    }

@Autowired
    private InitiativeRepository initiativeRepository;
@Autowired
    private PersonRepository personRepository;


    @PostMapping("/create")
    public String createInitiative(@RequestParam String title,
                                   @RequestParam String description,
                                   @RequestParam String location,
                                   @RequestParam String startDate,
                                   @RequestParam String endDate,
                                   @RequestParam InitiativeCategory category,
                                   @RequestParam(required = false, defaultValue = "false") boolean isPublic,
                                   @AuthenticationPrincipal UserDetails user) {

        Initiative initiative = new Initiative();
        initiative.setTitle(title);
        initiative.setDescription(description);
        initiative.setLocation(location);
        initiative.setStartDate(LocalDateTime.parse(startDate));
        initiative.setEndDate(LocalDateTime.parse(endDate));
        initiative.setCategory(category);
        initiative.setPublic(isPublic);

        ic.create(user.getUsername(), initiative);

        return "redirect:/feed";
    }    @RequestMapping("/new")
    public String showCreateInitiativeForm(Model model) {
    model.addAttribute("categories", InitiativeCategory.values());
        return "create-initiative";
    }


}


===== ./src/main/java/com/localzero/api/controller/LoginController.java =====
package com.localzero.api.controller;

/**
 * @author: André
 */

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class LoginController {

    @GetMapping("/login")
    public String login() {
        return "login";
    }
/*
    @GetMapping("/register")
    public String register() {
        return "register";
    }

 */
}


===== ./src/main/java/com/localzero/api/controller/MessageController.java =====
package com.localzero.api.controller;





import com.localzero.api.entity.DirectMessage;
import com.localzero.api.entity.Notification;
import com.localzero.api.repository.DirectMessageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import com.localzero.api.repository.NotificationsRepository;
import com.localzero.api.repository.PersonRepository;
import org.springframework.security.core.Authentication;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping("/messages")
public class MessageController {

    @Autowired
    private DirectMessageRepository directMessageRepository;  //repository object som Spring Boot skapar varje gång vi kallar directMessageRepository

    @Autowired
    private NotificationsRepository notificationRepo;
    @Autowired
    private PersonRepository personRepo;

    @GetMapping
    public String renderChatPage(Authentication authentication, Model model) {
        String loggedInUserEmail = authentication.getName(); // Get the logged-in user's email
        List<DirectMessage> messages = new ArrayList<>();
        messages.addAll(directMessageRepository.findByReceiverEmail(loggedInUserEmail));
        messages.addAll(directMessageRepository.findBySenderEmail(loggedInUserEmail));
        model.addAttribute("messages", messages); // Add messages to the model
        return "messages"; // Resolves messages.html
    }

    @PostMapping
    @ResponseBody
    public DirectMessage sendMessage(@RequestBody DirectMessage message) { //Request, gör JSON till ett object som kan sparas

        message.setCreationDatetime(LocalDateTime.now());
        DirectMessage saved = directMessageRepository.save(message);

        Notification n = new Notification();
        n.setPerson(personRepo.findById(message.getReceiverEmail()).orElseThrow());
        n.setDescription("New Message from " + message.getSenderEmail());
        n.setRead(false);
        n.setCreationDatetime(LocalDateTime.now()); //Vet inte om det behövs riktigt
        notificationRepo.save(n);
        return saved;
    }

    @PostMapping(value = "/image", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @ResponseBody
    public DirectMessage sendImageMessage(
            @RequestParam("senderEmail") String senderEmail,
            @RequestParam("receiverEmail") String receiverEmail,
            @RequestParam("file") MultipartFile file) throws IOException {

        DirectMessage message = new DirectMessage();
        message.setSenderEmail(senderEmail);
        message.setReceiverEmail(receiverEmail);
        message.setCreationDatetime(LocalDateTime.now());
        message.setContent("image");
        message.setImageData(file.getBytes());
       DirectMessage saved = directMessageRepository.save(message);

       Notification n = new Notification();
        n.setPerson(personRepo.findById(message.getReceiverEmail()).orElseThrow());
        n.setDescription("New Message from " + message.getSenderEmail());
        n.setRead(false);
        n.setCreationDatetime(LocalDateTime.now()); //Vet inte om det behövs riktigt, men kanske för att sortera notifications!!
        notificationRepo.save(n);
        return saved;
    }

    @GetMapping("/image/{id}")
    @ResponseBody
    public ResponseEntity<byte[]> getImage(@PathVariable long id) {  //Skickar tillbaka bildens innehåll som bytes
        DirectMessage message = directMessageRepository.findById(id).orElseThrow();
        return ResponseEntity.ok().contentType(MediaType.IMAGE_JPEG).body(message.getImageData());
    }

    @GetMapping(value = "/get")
    @ResponseBody
    public List<DirectMessage> getMessages(@RequestParam String user1, @RequestParam String user2) { //@RequestParam får då users mail. Frontend viktigt att bestämma users mail på rätt sätt! Så att denna metod kan hitta rätt
        return directMessageRepository.findConversationBetween(user1, user2);
    }
}

===== ./src/main/java/com/localzero/api/controller/NotificationController.java =====
package com.localzero.api.controller;

import com.localzero.api.entity.Notification;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.localzero.api.repository.NotificationsRepository;
import java.util.List;

@RestController
@RequestMapping("/notifications")
public class NotificationController {

    @Autowired
    private NotificationsRepository notificationsRepository;

    @GetMapping
    public List<Notification> getUnread (@RequestParam String email) {

        return notificationsRepository.findByPersonEmailAndIsReadFalse(email);


    }

    @PutMapping ("/{id}/read")
    public void markAsRead(@PathVariable long id) {
        Notification n = notificationsRepository.findById(id).orElseThrow();
        n.setRead(true);
        notificationsRepository.save(n);
    }

}


===== ./src/main/java/com/localzero/api/controller/PostController.java =====
package com.localzero.api.controller;


import com.localzero.api.service.InitiativeService;
import com.localzero.api.service.PostService;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import com.localzero.api.template.PostCreator;

@Controller
public class PostController {
    private final PostService postService;
    private final PostCreator pCreator;
    private final InitiativeService inservice;

    public PostController(PostService postService, PostCreator pCreator, InitiativeService inservice) {
        this.postService = postService;
        this.pCreator = pCreator;
        this.inservice = inservice;

    }

    @GetMapping("/create-post")
    public String ShowCreatedPostFrom(Model model, @AuthenticationPrincipal UserDetails currentUser) {
        if(currentUser != null){
            model.addAttribute("initiatives",inservice.getByParticipant(currentUser.getUsername()));
        }else {
            model.addAttribute("initiatives",inservice.getAll());

        }
        return "create-post";
    }

    @PostMapping("/create-post")
    public String createPost(@RequestParam String content,@RequestParam(required = false) Long initiativeId ,@AuthenticationPrincipal UserDetails currentUser) {
        if (currentUser == null) {
            return "redirect:/login";
        }
        pCreator.create(currentUser.getUsername(), content, initiativeId);

        return "redirect:/feed";
    }


    @PostMapping("/posts/{id}/like")
    public String likePost(@PathVariable long id,
                           @RequestParam String source,
                           @AuthenticationPrincipal UserDetails currentUser) {
        if (currentUser == null) {
            return "redirect:/login";
        }

        postService.incrementLikes(id);

        if ("feed".equals(source)) {
            return "redirect:/feed";
        } else {
            String email = currentUser.getUsername();
            return "redirect:/profile/" + email;
        }
    }

}


===== ./src/main/java/com/localzero/api/controller/ProfileController.java =====
package com.localzero.api.controller;

import com.localzero.api.entity.Person;
import com.localzero.api.entity.Post;
import com.localzero.api.service.PersonService;
import com.localzero.api.service.PostService;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/profile")
public class ProfileController {
    private final PersonService personService;
    private final PostService postService;

    public ProfileController(PersonService personService, PostService postService) {
        this.personService = personService;
        this.postService = postService;
    }

    @GetMapping
    public String myProfile(Model model, @AuthenticationPrincipal UserDetails currentUser) {
        if (currentUser == null) {
            return "redirect:/login";
        }

        String email = currentUser.getUsername();
        Person user = personService.findByEmail(email);
        List<Post> posts = postService.getPostsByAuthorEmail(email);

        model.addAttribute("user", user);
        model.addAttribute("posts", posts);
        model.addAttribute("source", "profile");
        return "profile";
    }

    @GetMapping("/{email}")
    public String OtherProfile(@PathVariable String email, Model model) {
        Optional<Person> optionalUser = personService.findOptionalByEmail(email);

        if (optionalUser.isEmpty()) {
            model.addAttribute("message", "Användaren med e-post '" + email + "' hittades inte.");
            return "user-not-found";
        }
        Person user = optionalUser.get();
        List<Post> posts = postService.getPostsByAuthorEmail(email);
        model.addAttribute("user", user);
        model.addAttribute("posts", posts);
        model.addAttribute("source", "profile");
        return "profile";
    }

}



===== ./src/main/java/com/localzero/api/controller/RegistrationController.java =====
package com.localzero.api.controller;

/**
 * @author: André
 */

import com.localzero.api.entity.Person;
import com.localzero.api.entity.UserRoleAssignment;
import com.localzero.api.enumeration.UserRole;
import com.localzero.api.repository.PersonRepository;
import lombok.Data;
import lombok.SneakyThrows;
import org.antlr.v4.runtime.misc.LogManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@Controller
public class RegistrationController {

    @Autowired
    private PersonRepository personRepository;

    @GetMapping("/register")
    public String showRegistrationForm(Model model){
        return "register";
    }

//    @PostMapping( "/register")
//    public Person createPerson(@RequestBody Person person) {
//        // Lösenord ej krypterade, Spring Security behöver därför {noop} prefix
//        person.setPassword("{noop}" + person.getPassword());
//        //Save sparar personen till databasen (blir en insert into person osv automatiskt)
//        return personRepository.save(person);
//    }


    // Denna metod används för att hantera registrering av nya användare
    @SneakyThrows
    @PostMapping("/register")
    public String handleRegister(@RequestBody RegistrationRequest rq) {
        try {
            Person person = new Person();
            person.setName(rq.getName());
            person.setEmail(rq.getEmail());
            person.setPassword("{noop}" + rq.getPassword()); // Lägger till {noop} prefix för att undvika kryptering
            if (person.getProfilePic() != null && person.getProfilePic().length == 0) {
                person.setProfilePic(null);
            }
            personRepository.save(person);
            System.out.println("Person saved!!!!!!!!");
            return "redirect:/login"; // Omregistrering lyckades, omdirigera till inloggning
        } catch (Exception e) {
            System.out.println("Redirect failed!!!!!!!!");
            e.printStackTrace();
            return "error"; // Om något går fel, returnera ett felmeddelande
        }
    }
}

@Data
class RegistrationRequest {
    private String name;
    private String email;
    private String password;
    private byte[] profilePicture;
    private List<UserRole> roles;
}


===== ./src/main/java/com/localzero/api/controller/UserRoleController.java =====
package com.localzero.api.controller;


import com.localzero.api.entity.Person;
import com.localzero.api.enumeration.UserRole;
import com.localzero.api.entity.UserRoleAssignment;
import com.localzero.api.repository.PersonRepository;
import com.localzero.api.repository.UserRoleAssignmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/roles")
public class UserRoleController {

    @Autowired
    private UserRoleAssignmentRepository roleRepo;
    @Autowired
    private PersonRepository personRepo;

    @PostMapping
    public UserRoleAssignment assignRole(@RequestParam String email, @RequestParam UserRole role) {

        Person p = personRepo.findById(email).orElseThrow();

        UserRoleAssignment assignment = new UserRoleAssignment();
        assignment.setPerson(p);
        assignment.setRole(role);
        return roleRepo.save(assignment);
        
    }

    @GetMapping
    public List<UserRoleAssignment> getRoles(@RequestParam String email) {
        return roleRepo.findByPersonEmail(email);
    }

}


===== ./src/main/java/com/localzero/api/entity/Community.java =====
package com.localzero.api.entity;

/**
 * @author: André , Emil
 */

import jakarta.persistence.*;
import lombok.Data;

import java.io.Serializable;

@Entity
@Data
//@IdClass(Community.class)
public class Community {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;


    @Column(name = "member_email", nullable = false)
    private String memberEmail;

}
/*
@Data
class CommunityId implements Serializable {
    private Long id;
    private String memberEmail;
}

 */

===== ./src/main/java/com/localzero/api/entity/DirectMessage.java =====
package com.localzero.api.entity;

/**
 * @author: Adrian , Emil
 */

import jakarta.persistence.*;
import lombok.Data;

import java.time.LocalDateTime;

@Entity
@Data
//@IdClass(DirectMessageId.class)
public class DirectMessage {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;


    @Column(name = "sender_email", nullable = false)
    private String senderEmail;


    @Column(name = "receiver_email", nullable = false)
    private String receiverEmail;

    @ManyToOne
    @JoinColumn(name = "sender_email", referencedColumnName = "email", insertable = false, updatable = false)
    private Person sender;

    @ManyToOne
    @JoinColumn(name = "receiver_email", referencedColumnName = "email", insertable = false, updatable = false)
    private Person receiver;

    @Column(name = "content", nullable = false)
    private String content;

    @Column(name = "creation_datetime", nullable = false)
    private LocalDateTime creationDatetime;

    @Lob
    @Column(name = "image_data")
    private byte[] imageData;
}
/*
@Data
class DirectMessageId implements Serializable {
    private String senderEmail;
    private String receiverEmail;
}

 */


===== ./src/main/java/com/localzero/api/entity/EcoAction.java =====
package com.localzero.api.entity;
import jakarta.persistence.*;
import lombok.Data;

/**
 * @author: Mahyar, Emil
 */

@Entity
@Data
@Table(name = "eco_action")
public class EcoAction {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "author_email",nullable = false)
    private String authorEmail;

    /*
    @Id
    @Column(name = "author_email")
    private String authorEmail;

     */

    @Column(name = "community_id",nullable = false)
    private Long communityId;

    private String content;

    @Column(name = "carbon_savings")
    private Float carbonSavings;

    @ManyToOne
    @JoinColumn(name = "community_id", referencedColumnName = "id", insertable = false, updatable = false)
    private Community community;
}


===== ./src/main/java/com/localzero/api/entity/Initiative.java =====
package com.localzero.api.entity;

/**
 * @author André
 * @author Emil
 */

import com.localzero.api.enumeration.InitiativeCategory;
import jakarta.persistence.*;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Data
public class Initiative {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "creator_email", referencedColumnName = "email", nullable = false)
    private Person creator;

    @Column(nullable = false)
    private String title;

    @Column(nullable = false,columnDefinition = "TEXT")
    private String description;

    @Column(nullable = false)
    private String location;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private InitiativeCategory category;

    @Column(name = "start_date",nullable = false)
    private LocalDateTime startDate;

    @Column(name = "end_date",nullable = false)
    private LocalDateTime endDate;

    @Column(name = "is_public",nullable = false)
    private boolean isPublic;

    @Column(name = "creation_datetime", nullable = false)
    private LocalDateTime creationDatetime;

    @ManyToOne
    @JoinColumn(name = "community_id", referencedColumnName = "id")
    private Community community;

    @ManyToOne
    @JoinColumn(name = "communitymember_email", referencedColumnName = "email", nullable = false)
    private Person communityMember;

    @ManyToMany
    @JoinTable(
            name = "initiative_participant",
            joinColumns = @JoinColumn(name = "initiative_id"),
            inverseJoinColumns = @JoinColumn(name = "participant_email")
    )
    private Set<Person> participants = new HashSet<>();

}


===== ./src/main/java/com/localzero/api/entity/InitiativeParticipant.java =====
/*
package com.localzero.api.entity;

/**
 * @author André , Emil
 */

import jakarta.persistence.*;
import lombok.Data;

import java.io.Serializable;
/*
@Entity
@Data
//@IdClass(InitiativeParticipantId.class)
public class InitiativeParticipant {

    @EmbeddedId
    private InitiativeParticipantId initiativeParticipantId = new InitiativeParticipantId();
/*
    @Id
    @Column(name = "initiative_id", nullable = false)
    private Long initiativeId;

 */
/*
    @Id
    @Column(name = "participant_email", nullable = false)
    private String participantEmail;

 */
/*
    @ManyToOne
    @MapsId("initiativeId")
    @JoinColumn(name = "initiative_id", referencedColumnName = "id", insertable = false, updatable = false)
    private Initiative initiative;

    @ManyToOne
    @MapsId("participantEmail")
    @JoinColumn(name = "participant_email", referencedColumnName = "email", insertable = false, updatable = false)
    private Person participant;
}
/*
@Data
class InitiativeParticipantId implements Serializable {
    private Long initiativeId;
    private String participantEmail;
}

 */





===== ./src/main/java/com/localzero/api/entity/Notification.java =====
package com.localzero.api.entity;

/**
 * @author Adrian Von krösus Schwenssonmssims 💀
 */

import jakarta.persistence.*;
import lombok.Data;

import java.time.LocalDateTime;

    @Entity
    @Data
    public class Notification {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @ManyToOne
        @JoinColumn(name = "email", referencedColumnName = "email", nullable = false)
        private Person person;

        @Column(name = "description", nullable = false)
        private String description;

        @Column(name = "creation_datetime", nullable = false)
        private LocalDateTime creationDatetime;

        @Column(name = "is_read")
        private boolean isRead = false;

    }



===== ./src/main/java/com/localzero/api/entity/Person.java =====
package com.localzero.api.entity;

/**
 * @author André
 */

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Data
public class Person {

    @Id
    private String email;

    private String name;

    private String password;

    @Lob
    @Basic(fetch = FetchType.LAZY)
    @Column(name = "profile_pic")
    private byte[] profilePic;

    @ManyToOne
    @JoinColumn(name = "community_id", referencedColumnName = "id")
    private Community community;
}

===== ./src/main/java/com/localzero/api/entity/Post.java =====
package com.localzero.api.entity;

/**
 * @author Emil
 * @author Mahyar
 */

import jakarta.persistence.*;
import lombok.Data;
import com.localzero.api.template.TimeStampEntry;

import java.time.LocalDateTime;

@Entity
@Data
public class Post implements TimeStampEntry{

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "initiative_id")
    private Initiative initiative;

    @ManyToOne
    @JoinColumn(name = "author_email", referencedColumnName = "email")
    private Person author;

    private String content;

    @Lob
    private byte[] image;

    private int likesCount;

    @Column(name = "creation_datetime")
    private LocalDateTime creationDatetime;

    @PrePersist
    private void onCreate() {
        creationDatetime = LocalDateTime.now();
        likesCount = 0;
    }

    
}


===== ./src/main/java/com/localzero/api/entity/PostComment.java =====
package com.localzero.api.entity;

/**
 * @author Emil
 */

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.Data;

import java.io.Serializable;
import java.time.LocalDateTime;

@Entity
@Data
public class PostComment {

    @EmbeddedId
    private PostCommentId id = new PostCommentId();

    @ManyToOne
    @MapsId("postId")
    @JoinColumn(name = "post_id", referencedColumnName = "id", nullable = false)
    private Post post;

    @ManyToOne
    @MapsId("memberEmail")
    @JoinColumn(name = "author_email", referencedColumnName = "email", nullable = false)
    private Person author;

    private String content;

    @Column(nullable = false)
    private LocalDateTime creationDatetime;

}
/*
@AllArgsConstructor
@NoArgsConstructor

 */
@Data
class PostCommentId implements Serializable {
    private Long postId;
    private String memberEmail;
}

===== ./src/main/java/com/localzero/api/entity/UserRoleAssignment.java =====
package com.localzero.api.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.*;
import lombok.Data;
import com.localzero.api.enumeration.UserRole;

@Entity
@Data
public class UserRoleAssignment {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(optional = false)
    @JoinColumn(name = "email", referencedColumnName = "email")
    private Person person;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private UserRole role;

}


===== ./src/main/java/com/localzero/api/enumeration/InitiativeCategory.java =====
package com.localzero.api.enumeration;

public enum InitiativeCategory {
    TOOL_SHARING,
    FOOD_SWAP,
    GARDENING,
    RECYCLING,
    RIDE_SHARING,
    ENVIRONMENT
}


===== ./src/main/java/com/localzero/api/enumeration/UserRole.java =====
package com.localzero.api.enumeration;

public enum UserRole {

    RESIDENT,
    ORGANIZER
}


===== ./src/main/java/com/localzero/api/LocalZeroApplication.java =====
package com.localzero.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LocalZeroApplication {

    public static void main(String[] args) {
        SpringApplication.run(LocalZeroApplication.class, args);
    }
}


===== ./src/main/java/com/localzero/api/repository/CommunityRepository.java =====
package com.localzero.api.repository;

import com.localzero.api.entity.Community;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CommunityRepository extends JpaRepository<Community,Long> {
}


===== ./src/main/java/com/localzero/api/repository/DirectMessageRepository.java =====
package com.localzero.api.repository;

import com.localzero.api.entity.DirectMessage;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface DirectMessageRepository extends JpaRepository<DirectMessage, Long> {

    @Query("""
        SELECT dm FROM DirectMessage dm
        WHERE (dm.senderEmail = :user1 AND dm.receiverEmail = :user2)
           OR (dm.senderEmail = :user2 AND dm.receiverEmail = :user1) 
        ORDER BY dm.creationDatetime
    """)
    //OR för att se båda Conversations
    List<DirectMessage> findConversationBetween(String user1, String user2);

    List<DirectMessage> findByReceiverEmail(String receiverEmail);

    List<DirectMessage> findBySenderEmail(String senderEmail);

}


===== ./src/main/java/com/localzero/api/repository/InitiativeRepository.java =====
package com.localzero.api.repository;

import com.localzero.api.entity.Initiative;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface InitiativeRepository extends JpaRepository<Initiative,Long> {
    List<Initiative> findByCreatorEmail(String email);
    List<Initiative> findByParticipantsEmail(String email);

}


===== ./src/main/java/com/localzero/api/repository/NotificationsRepository.java =====
package com.localzero.api.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import com.localzero.api.entity.Notification;
import java.util.List;


public interface NotificationsRepository extends JpaRepository<Notification, Long> {

    List<Notification>findByPersonEmailAndIsReadFalse(String email);
}



===== ./src/main/java/com/localzero/api/repository/PersonRepository.java =====
package com.localzero.api.repository;
import com.localzero.api.entity.Person;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface PersonRepository extends JpaRepository<Person,String> {
    Optional<Person> findByEmail(String email);
}


===== ./src/main/java/com/localzero/api/repository/PostRepository.java =====
package com.localzero.api.repository;

import com.localzero.api.entity.Post;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface PostRepository extends JpaRepository<Post, Long> {
    List<Post> findByAuthorEmailOrderByCreationDatetimeDesc(String authorEmail);
}


===== ./src/main/java/com/localzero/api/repository/UserRoleAssignmentRepository.java =====
package com.localzero.api.repository;

import com.localzero.api.entity.UserRoleAssignment;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface UserRoleAssignmentRepository extends JpaRepository<UserRoleAssignment, Long> {
    List<UserRoleAssignment> findByPersonEmail(String email);
}

===== ./src/main/java/com/localzero/api/security/SecurityConfiguration.java =====
package com.localzero.api.security;

import com.localzero.api.service.PersonService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {

    @Autowired
    private PersonService personService;

    @Bean
    public UserDetailsService userDetailsService() {
        return personService;
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(personService);
        return authProvider;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
        return httpSecurity
                .csrf(AbstractHttpConfigurer::disable)
                .formLogin(httpForm -> {
                    httpForm
                            .loginPage("/login")
                            .usernameParameter("email")
                            .permitAll();
                    httpForm.defaultSuccessUrl("/feed", true); // Redirect to /feed after login
                })
                .authorizeHttpRequests(registry -> {
                    registry
                            .requestMatchers("/register", "/css/**", "/js/**").permitAll()
                            .anyRequest().authenticated();
                })
                .build();
    }
}


===== ./src/main/java/com/localzero/api/service/InitiativeService.java =====
package com.localzero.api.service;

import com.localzero.api.entity.Initiative;
import com.localzero.api.repository.InitiativeRepository;
import org.springframework.stereotype.Service;

import java.util.List;
@Service
public class InitiativeService {
    private final InitiativeRepository ir;

    public InitiativeService(InitiativeRepository ir){
        this.ir = ir;
    }

    public List<Initiative> getAll(){
        return ir.findAll();
    }

    public List<Initiative> getByParticipant(String email){
        return ir.findByParticipantsEmail(email);
    }
    public Initiative getById(Long id){
        return ir.findById(id).orElseThrow();
    }
}


===== ./src/main/java/com/localzero/api/service/PersonService.java =====
package com.localzero.api.service;

import com.localzero.api.entity.Person;
import com.localzero.api.repository.PersonRepository;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@AllArgsConstructor
public class PersonService implements UserDetailsService {

    @Autowired
    private final PersonRepository personRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        System.out.println("Loading user by email: " + email);
        Optional<Person> person = personRepository.findByEmail(email);
        if (person.isPresent()) {
            var personObj = person.get();
            return User.builder().
                    username(personObj.getEmail()).
                    password(personObj.getPassword()).
                    build();
        } else {
            throw new UsernameNotFoundException("User not found with email: " + email);
        }
    }

    public Person findByEmail(String email) {
        return personRepository.findByEmail(email).orElseThrow(() -> new RuntimeException("User not found"));
    }

    public Optional<Person> findOptionalByEmail(String email) {
        return personRepository.findById(email);
    }

}


===== ./src/main/java/com/localzero/api/service/PostService.java =====
package com.localzero.api.service;

import com.localzero.api.entity.Post;
import com.localzero.api.repository.PostRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PostService {

    private final PostRepository postRepository;

    public PostService(PostRepository postRepository) {
        this.postRepository = postRepository;
    }

    public List<Post> getPostsByAuthorEmail(String email){
        return postRepository.findByAuthorEmailOrderByCreationDatetimeDesc(email);
    }
    public Post save(Post post){
        return postRepository.save(post);
    }

    public void incrementLikes(long postId){
        Post post = postRepository.findById(postId).orElseThrow();
        post.setLikesCount(post.getLikesCount()+1);
        postRepository.save(post);
    }
}


===== ./src/main/java/com/localzero/api/template/AbstractCreator.java =====
package template;

import com.localzero.api.entity.Person;
import com.localzero.api.entity.Post;
import com.localzero.api.template.TimeStampEntry;

import java.time.LocalDateTime;

public abstract class AbstractCreator<T extends TimeStampEntry> {

    public final T create(String email, String content){
        Person user = loadUser(email);
        T entity = build(user,content);
        setTimestamps(entity);
        return persist(entity);
    }

    protected abstract Person loadUser(String email);
    protected abstract T build(Person user,String content);
    protected abstract void setTimestamps(T entity);
    protected abstract T persist(T entity);

}


===== ./src/main/java/com/localzero/api/template/AbstractInitiativeCreator.java =====
package com.localzero.api.template;

import com.localzero.api.entity.Initiative;
import com.localzero.api.entity.Person;

import java.time.LocalDateTime;

public abstract class AbstractInitiativeCreator {
    public final Initiative create(String email, Initiative initiative){
        Person user = loadUser(email);
        initiativedetailer(user,initiative);
        initiative.setCreationDatetime(LocalDateTime.now());
        return save(initiative);
    }

    protected abstract Person loadUser(String email);
    protected abstract  void initiativedetailer(Person user, Initiative initiative);
    protected abstract Initiative save(Initiative initiative);
}


===== ./src/main/java/com/localzero/api/template/InitiativeCreator.java =====
package com.localzero.api.template;

import com.localzero.api.entity.Initiative;
import com.localzero.api.entity.Person;
import com.localzero.api.repository.InitiativeRepository;
import com.localzero.api.service.PersonService;
import org.springframework.stereotype.Service;

@Service
public class InitiativeCreator extends AbstractInitiativeCreator {

    private final InitiativeRepository ir;
    private final PersonService ps;

    public InitiativeCreator(InitiativeRepository ir, PersonService ps){
        this.ir = ir;
        this.ps = ps;
    }

    @Override
    protected Person loadUser(String email) {
        return ps.findByEmail(email);
    }

    @Override
    protected void initiativedetailer(Person user, Initiative initiative) {
        initiative.setCreator(user);
        initiative.setCommunity(user.getCommunity());
        initiative.setCommunityMember(user);
    }

    @Override
    protected Initiative save(Initiative initiative) {
        return ir.save(initiative);
    }
}


===== ./src/main/java/com/localzero/api/template/PostCreator.java =====
package com.localzero.api.template;

import com.localzero.api.entity.Initiative;
import com.localzero.api.entity.Person;
import com.localzero.api.entity.Post;
import com.localzero.api.repository.InitiativeRepository;
import com.localzero.api.repository.PostRepository;
import com.localzero.api.service.PersonService;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class PostCreator extends template.AbstractCreator<Post> {

    private final PostRepository postRepo;
    private final PersonService personService;
    private final InitiativeRepository initiativeRepository;

    public PostCreator(PostRepository postRepo, PersonService personService, InitiativeRepository initiativeRepository){
        this.postRepo = postRepo;
        this.personService = personService;
        this.initiativeRepository = initiativeRepository;
    }

    @Override
    protected Person loadUser(String email) {
        return personService.findByEmail(email);
    }

    @Override
    protected Post build(Person user,String content) {
        Post post = new Post();
        post.setAuthor(user);
        post.setContent(content);
        post.setLikesCount(0);
        return post;
    }

    public Post create(String email, String content,Long initiativeId){
        Post post = super.create(email,content);
        if (initiativeId != null){
            Initiative initiative = initiativeRepository.findById(initiativeId).orElseThrow();
            post.setInitiative(initiative);
        }
        return postRepo.save(post);
    }

    @Override
    protected void setTimestamps(Post entity) {
        entity.setCreationDatetime(LocalDateTime.now());
    }

    @Override
    protected Post persist(Post entity) {
        return postRepo.save(entity);
    }


}


===== ./src/main/java/com/localzero/api/template/TimeStampEntry.java =====
package com.localzero.api.template;

import java.time.LocalDateTime;

public interface TimeStampEntry {
    void setCreationDatetime(LocalDateTime dateTime);
}


===== ./src/main/resources/application-secrets.properties =====
spring.datasource.password=hx408oft
spring.datasource.username=ac9996

===== ./src/main/resources/application.properties =====
spring.application.name=LocalZero
spring.config.import=optional:application-secrets.properties
spring.datasource.url=jdbc:postgresql://pgserver.mau.se:5432/localzerooo
spring.datasource.username=${spring.datasource.username}
spring.datasource.password=${spring.datasource.password}
spring.datasource.hikari.maximum-pool-size=2
spring.jpa.hibernate.ddl-auto= create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql=TRACE
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html



===== ./src/main/resources/static/css/dm.css =====
body {
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', sans-serif;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    min-height: 100vh;
    overflow: hidden;
}

.navbar {
    display: flex;
    justify-content: space-between;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
}

.navbar a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 1rem;
}

.navbar a:hover {
    text-decoration: underline;
}

.messages-layout {
    display: flex;
    height: calc(100vh - 60px); /* Full height minus navbar */
    overflow: hidden; /* Prevent layout scrolling */
}

.dm-container {
    width: 30%;
    border-right: 1px solid #ddd;
    overflow-y: scroll;
    padding: 20px;
    background: rgba(255, 255, 255, 0.9);
}

.chat-container {
    width: 70%;
    overflow-y: scroll;
    padding: 20px;
    background: rgba(255, 255, 255, 0.9);
}

/* Custom scrollbar styling */
.dm-container::-webkit-scrollbar,
.chat-container::-webkit-scrollbar {
    width: 8px;
}

.dm-container::-webkit-scrollbar-thumb,
.chat-container::-webkit-scrollbar-thumb {
    background-color: #888;
    border-radius: 4px;
}

.dm-item {
    padding: 10px;
    border-bottom: 1px solid #eee;
    cursor: pointer;
}

.dm-item:hover {
    background-color: #f5f5f5;
}



===== ./src/main/resources/static/css/feed.css =====
body{
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI',sans-serif;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    min-height: 100vh;
}

.feed-wrapper{
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
    background-color: rgba(255,255,255,0.1);
    border: 2px solid rgba(255,255,255,0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    box-shadow: 0 0 20px rgba(0,0,0,0.2);
}

.feed-post{
    background: rgba(255,255,255,0.15);
    border-radius: 10px;
    margin-bottom: 1rem;
    padding: 1rem;
    color: black;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.feed-post-header{
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #333;
}

.feed-post-content{
    font-size: 1rem;
    line-height: 1.4;
    color: #111;
}

.feed-post img{
    max-width: 100%;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.feed-actions{
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.feed-actions button{
    background-color: #ffffffcc;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}

.feed-actions button:hover{
    background-color: white;
}

.likes-count{
    font-size: 0.9rem;
    color: #222;
}

.navbar{
    display: flex;
    justify-content: space-between;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
}
.navbar a{
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 1rem;
}
.navbar a:hover{
    text-decoration: underline;
}



===== ./src/main/resources/static/css/login.css =====
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', sans-serif;
}

body {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
}

section {
    background-color: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    padding: 2rem;
    width: 350px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
}

.form-container h1 {
    color: black;
    text-align: center;
    margin-bottom: 1rem;
}

.input-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
}

.input-group label {
    color: black;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.input-group input {
    padding: 0.5rem;
    border: none;
    border-radius: 8px;
    outline: none;
}

button {
    width: 100%;
    padding: 0.6rem;
    border: none;
    border-radius: 8px;
    background-color: #ffffffcc;
    font-weight: bold;
    cursor: pointer;
    transition: 0.3s;
}



button:hover {
    background-color: white;
}


===== ./src/main/resources/static/css/main.css =====
{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', sans-serif;
}

*{
    font-family: 'Segoe UI', sans-serif;
}

body {
    min-height: 100vh;
    padding-top: 70px;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    font-family: 'Segoe UI', sans-serif;
}

.navbar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    display: flex;
    flex-wrap: wrap; /* Möjliggör radbrytning */
    justify-content: center; /* Centrera innehåll i flera rader */
    gap: 1rem;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
}

.navbar a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 0.5rem;
}
.navbar a:hover {
    text-decoration: underline;
}

.feed-wrapper {
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
    background-color: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
}


.like-button{
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
    padding: 0;
}

.like-button:hover{
    tansform: scale(1.1);
}

.post-footer{
    text-align: right;
    font-size: 0.8rem;
    color: #555;
    margin-top: 0.5rem;
}

.feed-post {
    background: rgba(255, 255, 255, 0.15);
    border-radius: 10px;
    margin-bottom: 1rem;
    padding: 1rem;
    color: black;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.feed-post-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #000000;
}

.feed-post-content {
    font-size: 1rem;
    line-height: 1.4;
    color: #000000;
}

.feed-post img {
    max-width: 100%;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.feed-actions {
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.feed-actions button {
    background-color: #ffffffcc;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}
.feed-actions button:hover {
    background-color: white;
}

.likes-count {
    font-size: 0.9rem;
    color: #222;
}

.form-container,
.create-initiative-container {
    background-color: rgba(255,255,255,0.1);
    border: 2px solid rgba(255,255,255,0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    padding: 2rem;
    max-width: 350px;
    margin: 2rem auto;
    box-shadow: 0 0 15px rgba(0,0,0,0.2);
}

.form-container h1,
.create-initiative-container h1 {
    text-align: center;
    margin-bottom: 1rem;
    color: black;
}

.input-group,
.create-initiative-container .input-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
}

.input-group label,
.create-initiative-container .input-group label {
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: black;
}

.input-group input,
.create-initiative-container .input-group input,
.create-initiative-container .input-group textarea,
textarea {
    padding: 0.5rem;
    border: none;
    border-radius: 8px;
    outline: none;
    resize: vertical;
}

button {
    width: 100%;
    padding: 0.6rem;
    border: none;
    border-radius: 8px;
    background-color: #ffffffcc;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: white;
}

.profile-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 2rem;
    margin-top: 3rem;
    flex-wrap: wrap;
    padding: 0 2rem;
}

.profile-card {
    background-color: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.4);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 15px;
    padding: 2rem 3rem;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.25);
    width: 100%;
    max-width: 350px;
    color: #000000;
}


.profile-card h1 {
    margin-top: 0;
    font-size: 1.8rem;
    color: #000000;
}

.profile-card p {
    font-size: 1rem;
    margin: 0.5rem 0;
    color: #000000;
}

.profile-card strong {
    color: #222;
}

.user-posts {
    flex: 1;
    max-width: 800px;
    min-width: 300px;
}

.user-posts h2 {
    color: #222;
    margin-bottom: 1rem;
}



===== ./src/main/resources/static/css/profile.css =====
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f6f8;
    margin: 0;
    padding: 0;
}

.navbar{
    display: flex;
    justify-content: space-between;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
}

.navbar a{
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 1rem;
}

.navbar a:hover{
    text-decoration: underline;
}

.profile-container {
    display: flex;
    justify-content: center;
    margin-top: 3rem;
}


.profile-card {
    background-color: #ffffff;
    border-radius: 12px;
    padding: 2rem 3rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 350px;
}

.profile-card h1 {
    margin-top: 0;
    font-size: 2rem;
    color: #333;
}

.profile-card p {
    font-size: 1rem;
    margin: 0.5rem 0;
    color: #555;
}

.profile-card strong {
    color: #222;
}


@media (max-width: 350px) {
    .profile-card {
        padding: 1.5rem;
    }

    .profile-card h1 {
        font-size: 1.5rem;
    }
}

===== ./src/main/resources/static/js/register.js =====
const baseURL = 'http://localhost:8080';

document.getElementById("submit").addEventListener('click', (event) => {
    event.preventDefault(); // Prevent default form submission
    submitForm();
});

function submitForm() {
    console.log("Submit button clicked");

    const data = {
        name: document.getElementById('name').value,
        email: document.getElementById('email').value,
        password: document.getElementById('password').value,
        profilePicture: document.getElementById('profilePicture').value
    };

    if (!data.name || !data.email || !data.password) {
        alert("Please fill in all fields");
        return;
    }

    console.log(data);

    const jsonData = JSON.stringify(data);
    fetch(baseURL + '/register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: jsonData
    })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            }
        })
}

===== ./src/main/resources/static/js/script.js =====


===== ./src/main/resources/templates/create-initiative.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Initiative Creator</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
<div th:replace="fragments :: navbar"></div>

<div class="create-initiative-container">
<h2>Create an Initiative!</h2>
<form th:action="@{/initiatives/create}" method="post">
    <label for="title">Title: </label><br>
    <input type="text" name="title" id="title" required><br><br>

    <label for="description">Description:</label><br>
    <textarea name="description"  id="description" required></textarea><br><br>

    <label for="location">Location:</label><br>
    <input type="text" name="location" id="location" required><br><br>

    <label for="startDate">Start Date and time:</label><br>
    <input type="datetime-local" name="startDate" id="startDate" required><br><br>

    <label for="endDate">End Date and time:</label><br>
    <input type="datetime-local" name="endDate" id="endDate" required><br><br>

    <label for="category">Category:</label><br>
    <select name="category" id="category" required>
        <option th:each="cat : ${categories}"
                th:value="${cat}"
                th:text="${cat}"
        ></option>
    </select><br><br>

    <label for="isPublic">Public Initiative?</label>
    <input type="checkbox" name="isPublic" id="isPublic" value="true"><br><br>

    <button type="submit">Create Initiative</button>
</form>
</div>
</body>
</html>

===== ./src/main/resources/templates/create-post.html =====
<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <title>Create Post</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>

<div th:replace="fragments :: navbar"></div>

<div class="form-container">
    <h1> Create new post</h1>

    <form th:action="@{/create-post}" method="post">
        <textarea name="content" placeholder="Write your post here" required></textarea>


        <label for="initiativeId">Choose Initiative (Optional):</label>
        <select name="initiativeId" id="initiativeId">
            <option value="">-None-</option>
            <option th:each="i : ${initiatives}" th:value="${i.id}" th:text="${i.title}"></option>
        </select>
        <button type="submit">Publish</button>
    </form>
</div>

</body>
</html>

===== ./src/main/resources/templates/feed.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Feed</title>
    <link rel="stylesheet" href="/css/main.css">
</head>

<body>

<div th:replace="~{fragments :: navbar}"></div>

<div class="feed-wrapper">
    <div th:each="post : ${posts}">
        <div th:replace="~{fragments :: post(post=${post})}"></div>
    </div>
</div>

</body>
</html>


===== ./src/main/resources/templates/fragments.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>


<div th:fragment="navbar">
    <nav class="navbar">
        <a href="/profile">Profile</a>
        <a href="/messages">Direct Messages</a>
        <a href="/initiative/feed">Initiatives</a>
        <a href="/feed">Feed</a>
        <a href="/initiatives/new">Create initiative</a>
        <a href="/create-post">Create post</a>
        <a href="/logout">Log Out</a>
    </nav>
</div>

<div th:fragment="profile(user, posts)">
    <div class="profile-container">
        <div class="profile-card">
        <h1 th:text="'Hello,' + ${user.name} + '!'">Hello, User!</h1>
        <p><strong>Email</strong> <span th:text="${user.email}">mail@example.com</span></p>
        <!--<p><strong>Inlägg:</strong> <span th:text="${user.posts.size()}">0</span></p> -->
        </div>
        <div class="user-posts">
            <h2>Your posts</h2>
            <div th:if="${#lists.isEmpty(posts)}">
                <p>You have not posts yet!</p>
            </div>
            <div th:each="post : ${posts}">
                <div th:replace="~{fragments :: post(post=${post})}"></div>
            </div>
        </div>
    </div>
</div>

<div th:fragment="post(post)">
    <div class="feed-post">
        <div class="feed-post-header">
            <span th:if="${post != null and post.author != null}" th:text="${post.author.name}"></span>
            <span th:unless="${post != null and post.author != null}">Unknown user</span>
        </div>

        <div class="feed-post-content" th:text="${post.content}">Post Content</div>

        <div class="feed-actions">
            <form th:action="@{/posts/{id}/like(id=${post.id})}" method="post" style="display:inline;">
                <input type ="hidden" name="source" th:value="${source}"/>
                <button type="submit" class="like-button">❤️</button>
                <span th:text="${post.likesCount}">0</span>
            </form>
        </div>

        <div class="post-footer">
            <span th:text="${#temporals.format(post.creationDatetime, 'yyyy-MM-dd HH:mm')}"></span>
        </div>
    </div>
</div>


<div th:fragment="chat">
    <div class="chat-area">
        <!-- Chat messages will go here -->
    </div>
    <div class="chat-input">
        <textarea placeholder="Type a message..."></textarea>
        <button>Send</button>
    </div>
</div>

</body>
</html>

===== ./src/main/resources/templates/login.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Login</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
<section class="form-container">
<h1>Login</h1>
<form th:action="@{/login}" method="post">
    <div class="input-group">
        <label for="email">Email:</label>
        <input type="text" id="email" name="email" required>
    </div>
    <div class="input-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
    </div>
    <button type="submit">Login</button>
    <p>Don't have an account? <a th:href="@{/register}" style="color: #90cdf4">Register here</a></p>

</form>
</section>
</body>
</html>

===== ./src/main/resources/templates/messages.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Direct Messages</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>

<div th:replace="~{fragments :: navbar}"></div>

<div class="messages-layout">
    <div class="dm-container">
        <h1>Direct Messages</h1>
        <div class="dm-list">
            <div class="dm-item" th:each="message : ${messages}">
                <div class="dm-header">
                    <span th:text="${message.sender.name}">Sender Name</span>
                    <span th:text="${message.timestamp}">Timestamp</span>
                </div>
                <div class="dm-content" th:text="${message.content}">Message Content</div>
            </div>
        </div>
    </div>

    <div class="chat-container">
        <div th:replace="~{fragments :: chat}"></div>
    </div>
</div>
</body>
</html>

===== ./src/main/resources/templates/profile.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Profile</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>

<div th:replace="fragments :: navbar"></div>
<div th:replace="~{fragments :: profile(user=${user}, posts=${posts})}"></div>



</body>
</html>

===== ./src/main/resources/templates/register.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Register</title>
    <link rel="stylesheet" href="/css/main.css">
    <script src="/js/register.js" defer></script>
</head>
<body>
<section>
<form class="form-container" method="post">
    <h1>Register</h1>
    <div class="input-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>
    </div>
    <div class="input-group">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
    </div>
    <div class="input-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
    </div>
    <div class="input-group">
        <label for="profilePicture">Profile Picture :</label>
        <input type="file" id="profilePicture" name="profilePicture" accept="image/*" onchange="previewFile(this)" required>
    </div>
    <button id= "submit" type="button">Register</button>
</form>
</section>
</body>
</html>

===== ./src/main/resources/templates/user-not-found.html =====

<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <title>Användare ej hittad</title>
    <link rel="stylesheet" href="/css/profileStyle.css">
</head>
<body>

<!-- Navbar -->
<div th:replace="fragments :: navbar"></div>

<!-- Felmeddelande -->
<div class="error-container">
    <h1>Oj!</h1>
    <p th:text="${message}">Användaren hittades inte.</p>
    <a href="/feed">Tillbaka till flödet</a>
</div>

</body>
</html>


===== ./src/test/java/com/localzero/api/LocalZeroApplicationTests.java =====
package com.localzero.api;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class LocalZeroApplicationTests {

    @Test
    void contextLoads() {
    }

}


===== ./target/classes/application-secrets.properties =====
spring.datasource.password=hx408oft
spring.datasource.username=ac9996

===== ./target/classes/application.properties =====
spring.application.name=LocalZero
spring.config.import=optional:application-secrets.properties
spring.datasource.url=jdbc:postgresql://pgserver.mau.se:5432/localzerooo
spring.datasource.username=${spring.datasource.username}
spring.datasource.password=${spring.datasource.password}
spring.datasource.hikari.maximum-pool-size=2
spring.jpa.hibernate.ddl-auto= create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql=TRACE
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html



===== ./target/classes/static/css/dm.css =====
body {
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', sans-serif;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    min-height: 100vh;
    overflow: hidden;
}

.navbar {
    display: flex;
    justify-content: space-between;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
}

.navbar a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 1rem;
}

.navbar a:hover {
    text-decoration: underline;
}

.messages-layout {
    display: flex;
    height: calc(100vh - 60px); /* Full height minus navbar */
    overflow: hidden; /* Prevent layout scrolling */
}

.dm-container {
    width: 30%;
    border-right: 1px solid #ddd;
    overflow-y: scroll;
    padding: 20px;
    background: rgba(255, 255, 255, 0.9);
}

.chat-container {
    width: 70%;
    overflow-y: scroll;
    padding: 20px;
    background: rgba(255, 255, 255, 0.9);
}

/* Custom scrollbar styling */
.dm-container::-webkit-scrollbar,
.chat-container::-webkit-scrollbar {
    width: 8px;
}

.dm-container::-webkit-scrollbar-thumb,
.chat-container::-webkit-scrollbar-thumb {
    background-color: #888;
    border-radius: 4px;
}

.dm-item {
    padding: 10px;
    border-bottom: 1px solid #eee;
    cursor: pointer;
}

.dm-item:hover {
    background-color: #f5f5f5;
}



===== ./target/classes/static/css/feed.css =====
body{
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI',sans-serif;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    min-height: 100vh;
}

.feed-wrapper{
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
    background-color: rgba(255,255,255,0.1);
    border: 2px solid rgba(255,255,255,0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    box-shadow: 0 0 20px rgba(0,0,0,0.2);
}

.feed-post{
    background: rgba(255,255,255,0.15);
    border-radius: 10px;
    margin-bottom: 1rem;
    padding: 1rem;
    color: black;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.feed-post-header{
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #333;
}

.feed-post-content{
    font-size: 1rem;
    line-height: 1.4;
    color: #111;
}

.feed-post img{
    max-width: 100%;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.feed-actions{
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.feed-actions button{
    background-color: #ffffffcc;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}

.feed-actions button:hover{
    background-color: white;
}

.likes-count{
    font-size: 0.9rem;
    color: #222;
}

.navbar{
    display: flex;
    justify-content: space-between;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
}
.navbar a{
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 1rem;
}
.navbar a:hover{
    text-decoration: underline;
}



===== ./target/classes/static/css/feedStyle.css =====
body{
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI',sans-serif;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    min-height: 100vh;
    padding-top: 60px;
}

.feed-wrapper{
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
    background-color: rgba(255,255,255,0.1);
    border: 2px solid rgba(255,255,255,0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    box-shadow: 0 0 20px rgba(0,0,0,0.2);
}

.feed-post{
    background: rgba(255,255,255,0.15);
    border-radius: 10px;
    margin-bottom: 1rem;
    padding: 1rem;
    color: black;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.feed-post-header{
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #333;
}

.feed-post-content{
    font-size: 1rem;
    line-height: 1.4;
    color: #111;
}

.feed-post img{
    max-width: 100%;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.feed-actions{
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.feed-actions button{
    background-color: #ffffffcc;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}

.feed-actions button:hover{
    background-color: white;
}

.likes-count{
    font-size: 0.9rem;
    color: #222;
}

.navbar{
    position: fixed;
    display: flex;
    top: 0;
    left: 0;
    width: 100%;
    justify-content: space-between;
    background-color: #2c3e50;
    padding: 10px 20px;
    color: white;
    gap: 10px;
    z-index: 1000;
}
.navbar a{
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 1rem;
}
.navbar a:hover{
    text-decoration: underline;
}



===== ./target/classes/static/css/login.css =====
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', sans-serif;
}

body {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
}

section {
    background-color: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    padding: 2rem;
    width: 350px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
}

.form-container h1 {
    color: black;
    text-align: center;
    margin-bottom: 1rem;
}

.input-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
}

.input-group label {
    color: black;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.input-group input {
    padding: 0.5rem;
    border: none;
    border-radius: 8px;
    outline: none;
}

button {
    width: 100%;
    padding: 0.6rem;
    border: none;
    border-radius: 8px;
    background-color: #ffffffcc;
    font-weight: bold;
    cursor: pointer;
    transition: 0.3s;
}



button:hover {
    background-color: white;
}


===== ./target/classes/static/css/main.css =====
{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', sans-serif;
}

*{
    font-family: 'Segoe UI', sans-serif;
}

body {
    min-height: 100vh;
    padding-top: 70px;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    font-family: 'Segoe UI', sans-serif;
}

.navbar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    display: flex;
    flex-wrap: wrap; /* Möjliggör radbrytning */
    justify-content: center; /* Centrera innehåll i flera rader */
    gap: 1rem;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
}

.navbar a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 0.5rem;
}
.navbar a:hover {
    text-decoration: underline;
}

.feed-wrapper {
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
    background-color: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
}


.like-button{
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
    padding: 0;
}

.like-button:hover{
    tansform: scale(1.1);
}

.post-footer{
    text-align: right;
    font-size: 0.8rem;
    color: #555;
    margin-top: 0.5rem;
}

.feed-post {
    background: rgba(255, 255, 255, 0.15);
    border-radius: 10px;
    margin-bottom: 1rem;
    padding: 1rem;
    color: black;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.feed-post-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #000000;
}

.feed-post-content {
    font-size: 1rem;
    line-height: 1.4;
    color: #000000;
}

.feed-post img {
    max-width: 100%;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.feed-actions {
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.feed-actions button {
    background-color: #ffffffcc;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}
.feed-actions button:hover {
    background-color: white;
}

.likes-count {
    font-size: 0.9rem;
    color: #222;
}

.form-container,
.create-initiative-container {
    background-color: rgba(255,255,255,0.1);
    border: 2px solid rgba(255,255,255,0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    padding: 2rem;
    max-width: 350px;
    margin: 2rem auto;
    box-shadow: 0 0 15px rgba(0,0,0,0.2);
}

.form-container h1,
.create-initiative-container h1 {
    text-align: center;
    margin-bottom: 1rem;
    color: black;
}

.input-group,
.create-initiative-container .input-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
}

.input-group label,
.create-initiative-container .input-group label {
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: black;
}

.input-group input,
.create-initiative-container .input-group input,
.create-initiative-container .input-group textarea,
textarea {
    padding: 0.5rem;
    border: none;
    border-radius: 8px;
    outline: none;
    resize: vertical;
}

button {
    width: 100%;
    padding: 0.6rem;
    border: none;
    border-radius: 8px;
    background-color: #ffffffcc;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: white;
}

.profile-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 2rem;
    margin-top: 3rem;
    flex-wrap: wrap;
    padding: 0 2rem;
}

.profile-card {
    background-color: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.4);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 15px;
    padding: 2rem 3rem;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.25);
    width: 100%;
    max-width: 350px;
    color: #000000;
}


.profile-card h1 {
    margin-top: 0;
    font-size: 1.8rem;
    color: #000000;
}

.profile-card p {
    font-size: 1rem;
    margin: 0.5rem 0;
    color: #000000;
}

.profile-card strong {
    color: #222;
}

.user-posts {
    flex: 1;
    max-width: 800px;
    min-width: 300px;
}

.user-posts h2 {
    color: #222;
    margin-bottom: 1rem;
}



===== ./target/classes/static/css/profile.css =====
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f6f8;
    margin: 0;
    padding: 0;
}

.navbar{
    display: flex;
    justify-content: space-between;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
}

.navbar a{
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 1rem;
}

.navbar a:hover{
    text-decoration: underline;
}

.profile-container {
    display: flex;
    justify-content: center;
    margin-top: 3rem;
}


.profile-card {
    background-color: #ffffff;
    border-radius: 12px;
    padding: 2rem 3rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 350px;
}

.profile-card h1 {
    margin-top: 0;
    font-size: 2rem;
    color: #333;
}

.profile-card p {
    font-size: 1rem;
    margin: 0.5rem 0;
    color: #555;
}

.profile-card strong {
    color: #222;
}


@media (max-width: 350px) {
    .profile-card {
        padding: 1.5rem;
    }

    .profile-card h1 {
        font-size: 1.5rem;
    }
}

===== ./target/classes/static/css/profileStyle.css =====
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f6f8;
    margin: 0;
    padding: 0;
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #1e2a38;
    padding: 1rem 2rem;
    color: white;
}

.navbar a {
    color: white;
    text-decoration: none;
    font-weight: 500;
}

.navbar a:hover {
    text-decoration: underline;
}

.profile-container {
    display: flex;
    justify-content: center;
    margin-top: 3rem;
}


.profile-card {
    background-color: #ffffff;
    border-radius: 12px;
    padding: 2rem 3rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 350px;
}

.profile-card h1 {
    margin-top: 0;
    font-size: 2rem;
    color: #333;
}

.profile-card p {
    font-size: 1rem;
    margin: 0.5rem 0;
    color: #555;
}

.profile-card strong {
    color: #222;
}


@media (max-width: 350px) {
    .profile-card {
        padding: 1.5rem;
    }

    .profile-card h1 {
        font-size: 1.5rem;
    }
}

===== ./target/classes/static/css/style.css =====
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', sans-serif;
}

body {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background-image: url("https://www.psdstack.com/wp-content/uploads/2019/08/copyright-free-images-750x420.jpg");
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    padding-top: 70px;
}

section {
    background-color: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    padding: 2rem;
    width: 350px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
}

.form-container h1 {
    color: black;
    text-align: center;
    margin-bottom: 1rem;
}

.input-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
}

.input-group label {
    color: black;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.input-group input {
    padding: 0.5rem;
    border: none;
    border-radius: 8px;
    outline: none;
}

button {
    width: 100%;
    padding: 0.6rem;
    border: none;
    border-radius: 8px;
    background-color: #ffffffcc;
    font-weight: bold;
    cursor: pointer;
    transition: 0.3s;
}



button:hover {
    background-color: white;
}

/* För create-initiative sidan */
.create-initiative-container{
    background-color: rgba(255,255,255,0.1);
    border: 2px solid rgba(255,255,255,0.3);
    border-radius: 15px;
    backdrop-filter: blur(15px);
    padding: 2rem;
    width: 100%;
    max-width: 500px;
    margin: 2rem auto;
    box-shadow: 0 0 15px rgba(0,0,0,0.2);
}
.create-initiative-container h1 {
    text-align: center;
    margin-bottom: 1rem;
    color: black;
}

.create-initiative-container .input-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
}

.create-initiative-container .input-group label {
     margin-bottom: 0.5rem;
     font-weight: 500;
     color: black;
 }
.create-initiative-container .input-group input,
  .create-initiative-container .input-group textarea {
      padding: 0.5rem;
      border: none;
      border-radius: 8px;
      outline: none;
  }

.create-initiative-container button {
    width: 100%;
    padding: 0.6rem;
    border: none;
    border-radius: 8px;
    background-color: #ffffffcc;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s;
}

.create-initiative-container button:hover {
    background-color: white;
}

.navbar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #2c3e50;
    padding: 1rem 2rem;
    color: white;
    gap: 1rem;
    flex-wrap: wrap; /* så att de inte hamnar utanför vid mindre skärm */
}

.navbar a{
    color: white;
    text-decoration: none;
    font-weight: bold;
    margin-left: 1rem;
}
.navbar a:hover{
    text-decoration: underline;
}


===== ./target/classes/static/js/register.js =====
const baseURL = 'http://localhost:8080';

document.getElementById("submit").addEventListener('click', (event) => {
    event.preventDefault(); // Prevent default form submission
    submitForm();
});

function submitForm() {
    console.log("Submit button clicked");

    const data = {
        name: document.getElementById('name').value,
        email: document.getElementById('email').value,
        password: document.getElementById('password').value,
        profilePicture: document.getElementById('profilePicture').value
    };

    if (!data.name || !data.email || !data.password) {
        alert("Please fill in all fields");
        return;
    }

    console.log(data);

    const jsonData = JSON.stringify(data);
    fetch(baseURL + '/register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: jsonData
    })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            }
        })
}

===== ./target/classes/static/js/script.js =====


===== ./target/classes/templates/create-initiative.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Initiative Creator</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
<div th:replace="fragments :: navbar"></div>

<div class="create-initiative-container">
<h2>Create an Initiative!</h2>
<form th:action="@{/initiatives/create}" method="post">
    <label for="title">Title: </label><br>
    <input type="text" name="title" id="title" required><br><br>

    <label for="description">Description:</label><br>
    <textarea name="description"  id="description" required></textarea><br><br>

    <label for="location">Location:</label><br>
    <input type="text" name="location" id="location" required><br><br>

    <label for="startDate">Start Date and time:</label><br>
    <input type="datetime-local" name="startDate" id="startDate" required><br><br>

    <label for="endDate">End Date and time:</label><br>
    <input type="datetime-local" name="endDate" id="endDate" required><br><br>

    <label for="category">Category:</label><br>
    <select name="category" id="category" required>
        <option th:each="cat : ${categories}"
                th:value="${cat}"
                th:text="${cat}"
        ></option>
    </select><br><br>

    <label for="isPublic">Public Initiative?</label>
    <input type="checkbox" name="isPublic" id="isPublic" value="true"><br><br>

    <button type="submit">Create Initiative</button>
</form>
</div>
</body>
</html>

===== ./target/classes/templates/create-post.html =====
<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <title>Create Post</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>

<div th:replace="fragments :: navbar"></div>

<div class="form-container">
    <h1> Create new post</h1>

    <form th:action="@{/create-post}" method="post">
        <textarea name="content" placeholder="Write your post here" required></textarea>


        <label for="initiativeId">Choose Initiative (Optional):</label>
        <select name="initiativeId" id="initiativeId">
            <option value="">-None-</option>
            <option th:each="i : ${initiatives}" th:value="${i.id}" th:text="${i.title}"></option>
        </select>
        <button type="submit">Publish</button>
    </form>
</div>

</body>
</html>

===== ./target/classes/templates/feed.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Feed</title>
    <link rel="stylesheet" href="/css/main.css">
</head>

<body>

<div th:replace="~{fragments :: navbar}"></div>

<div class="feed-wrapper">
    <div th:each="post : ${posts}">
        <div th:replace="~{fragments :: post(post=${post})}"></div>
    </div>
</div>

</body>
</html>


===== ./target/classes/templates/fragments.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>


<div th:fragment="navbar">
    <nav class="navbar">
        <a href="/profile">Profile</a>
        <a href="/messages">Direct Messages</a>
        <a href="/initiative/feed">Initiatives</a>
        <a href="/feed">Feed</a>
        <a href="/initiatives/new">Create initiative</a>
        <a href="/create-post">Create post</a>
        <a href="/logout">Log Out</a>
    </nav>
</div>

<div th:fragment="profile(user, posts)">
    <div class="profile-container">
        <div class="profile-card">
        <h1 th:text="'Hello,' + ${user.name} + '!'">Hello, User!</h1>
        <p><strong>Email</strong> <span th:text="${user.email}">mail@example.com</span></p>
        <!--<p><strong>Inlägg:</strong> <span th:text="${user.posts.size()}">0</span></p> -->
        </div>
        <div class="user-posts">
            <h2>Your posts</h2>
            <div th:if="${#lists.isEmpty(posts)}">
                <p>You have not posts yet!</p>
            </div>
            <div th:each="post : ${posts}">
                <div th:replace="~{fragments :: post(post=${post})}"></div>
            </div>
        </div>
    </div>
</div>

<div th:fragment="post(post)">
    <div class="feed-post">
        <div class="feed-post-header">
            <span th:if="${post != null and post.author != null}" th:text="${post.author.name}"></span>
            <span th:unless="${post != null and post.author != null}">Unknown user</span>
        </div>

        <div class="feed-post-content" th:text="${post.content}">Post Content</div>

        <div class="feed-actions">
            <form th:action="@{/posts/{id}/like(id=${post.id})}" method="post" style="display:inline;">
                <input type ="hidden" name="source" th:value="${source}"/>
                <button type="submit" class="like-button">❤️</button>
                <span th:text="${post.likesCount}">0</span>
            </form>
        </div>

        <div class="post-footer">
            <span th:text="${#temporals.format(post.creationDatetime, 'yyyy-MM-dd HH:mm')}"></span>
        </div>
    </div>
</div>


<div th:fragment="chat">
    <div class="chat-area">
        <!-- Chat messages will go here -->
    </div>
    <div class="chat-input">
        <textarea placeholder="Type a message..."></textarea>
        <button>Send</button>
    </div>
</div>

</body>
</html>

===== ./target/classes/templates/login.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Login</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
<section class="form-container">
<h1>Login</h1>
<form th:action="@{/login}" method="post">
    <div class="input-group">
        <label for="email">Email:</label>
        <input type="text" id="email" name="email" required>
    </div>
    <div class="input-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
    </div>
    <button type="submit">Login</button>
    <p>Don't have an account? <a th:href="@{/register}" style="color: #90cdf4">Register here</a></p>

</form>
</section>
</body>
</html>

===== ./target/classes/templates/messages.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Direct Messages</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>

<div th:replace="~{fragments :: navbar}"></div>

<div class="messages-layout">
    <div class="dm-container">
        <h1>Direct Messages</h1>
        <div class="dm-list">
            <div class="dm-item" th:each="message : ${messages}">
                <div class="dm-header">
                    <span th:text="${message.sender.name}">Sender Name</span>
                    <span th:text="${message.timestamp}">Timestamp</span>
                </div>
                <div class="dm-content" th:text="${message.content}">Message Content</div>
            </div>
        </div>
    </div>

    <div class="chat-container">
        <div th:replace="~{fragments :: chat}"></div>
    </div>
</div>
</body>
</html>

===== ./target/classes/templates/profile.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Profile</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>

<div th:replace="fragments :: navbar"></div>
<div th:replace="~{fragments :: profile(user=${user}, posts=${posts})}"></div>



</body>
</html>

===== ./target/classes/templates/register.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="en">
<head>
    <meta charset="UTF-8">
    <title>LocalZero - Register</title>
    <link rel="stylesheet" href="/css/main.css">
    <script src="/js/register.js" defer></script>
</head>
<body>
<section>
<form class="form-container" method="post">
    <h1>Register</h1>
    <div class="input-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>
    </div>
    <div class="input-group">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
    </div>
    <div class="input-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
    </div>
    <div class="input-group">
        <label for="profilePicture">Profile Picture :</label>
        <input type="file" id="profilePicture" name="profilePicture" accept="image/*" onchange="previewFile(this)" required>
    </div>
    <button id= "submit" type="button">Register</button>
</form>
</section>
</body>
</html>

===== ./target/classes/templates/user-not-found.html =====

<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <title>Användare ej hittad</title>
    <link rel="stylesheet" href="/css/profileStyle.css">
</head>
<body>

<!-- Navbar -->
<div th:replace="fragments :: navbar"></div>

<!-- Felmeddelande -->
<div class="error-container">
    <h1>Oj!</h1>
    <p th:text="${message}">Användaren hittades inte.</p>
    <a href="/feed">Tillbaka till flödet</a>
</div>

</body>
</html>


===== ./target/maven-archiver/pom.properties =====
artifactId=localzero
groupId=com.localzero
version=0.0.1-SNAPSHOT


